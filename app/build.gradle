plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'jacoco'
    // Add the Google services Gradle plugin
    id 'com.google.gms.google-services'
}

android {
    namespace 'com.github.scribeWizTeam.scribewiz'
    compileSdk 33

    defaultConfig {
        applicationId "com.github.scribeWizTeam.scribewiz"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        testInstrumentationRunnerArguments clearPackageData: 'true'
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility "11"
        targetCompatibility "11"
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
        viewBinding true
    }
    composeOptions {
        kotlinCompilerExtensionVersion "1.4.0"
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    // Compose
    def composeVersion = '1.4.3'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$composeVersion"
    // Fragment
    def fragmentVersion = '1.5.7'
    debugImplementation "androidx.fragment:fragment-testing:$fragmentVersion"
    // JUnit Ext
    def junitExtVersion = '1.1.5'
    androidTestImplementation "androidx.test.ext:junit:$junitExtVersion"
    // Test Runner
    def testRunnerVersion = '1.5.2'
    androidTestImplementation "androidx.test:runner:$testRunnerVersion"
    // Test Rules
    def testRulesVersion = '1.5.0'
    androidTestImplementation "androidx.test:rules:$testRulesVersion"
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.3'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'
    implementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    debugImplementation("androidx.fragment:fragment-testing:$fragmentVersion")
    implementation 'androidx.core:core-ktx:1.10.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation "androidx.fragment:fragment-ktx:$fragmentVersion"
    implementation 'androidx.test:core-ktx:1.5.0'
    debugImplementation "androidx.fragment:fragment-testing:$fragmentVersion"
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.0"

    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation "androidx.compose.ui:ui-tooling-preview:1.4.3"


    // Compose
    implementation "androidx.compose.ui:ui:$composeVersion"
    implementation "androidx.compose.compiler:compiler:$composeVersion"
    implementation "androidx.compose.runtime:runtime:$composeVersion"
    implementation "androidx.compose.material:material:$composeVersion"
    implementation "androidx.compose.runtime:runtime:$composeVersion"
    implementation "androidx.compose.runtime:runtime-livedata:$composeVersion"
    debugImplementation "androidx.compose.ui:ui-tooling:$composeVersion"

    def nav_version = "2.5.3"
    implementation("androidx.navigation:navigation-compose:$nav_version")

    // Activity
    def activity_version = "1.7.1"
    // Java language implementation
    // implementation "androidx.activity:activity:$activity_version"
    // Kotlin
    implementation "androidx.activity:activity-ktx:$activity_version"
    implementation "androidx.activity:activity-compose:$activity_version"

    // AlphaTab
    implementation 'net.alphatab:alphaTab-android:1.3.0-SNAPSHOT'

    // Coil (Used for profile pictures)
    implementation("io.coil-kt:coil-compose:2.3.0")

    // Testing

    
    def kotlin_version = "1.8.0"

    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.5.1'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation("androidx.compose.ui:ui-test-junit4:1.4.3")
    // Needed for createAndroidComposeRule, but not createComposeRule:
    debugImplementation("androidx.compose.ui:ui-test-manifest:$composeVersion")

    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:31.2.2')
    // Declare the dependency for the Cloud Firestore library
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'

    // Firebase authentication import
    implementation 'com.firebaseui:firebase-ui-auth:7.2.0'
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation "org.jetbrains.kotlin:kotlin-test:1.8.10"

    androidTestUtil 'androidx.test:orchestrator:1.4.2'
}

tasks.withType(Test) {
   jacoco.includeNoLocationClasses = true
   jacoco.excludes = ['jdk.internal.*']
   testLogging {
       showStandardStreams = true
   }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
    ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/*/coverage.ec'
    ]))
}

connectedCheck {
    finalizedBy jacocoTestReport
}
