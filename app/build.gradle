plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'jacoco'
    // Add the Google services Gradle plugin
    id 'com.google.gms.google-services'
}

android {
    namespace 'com.github.scribeWizTeam.scribewiz'
    compileSdk 33

    defaultConfig {
        applicationId "com.github.scribeWizTeam.scribewiz"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        testInstrumentationRunnerArguments clearPackageData: 'true'
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility "11"
        targetCompatibility "11"
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
        viewBinding true
    }
    composeOptions {
        kotlinCompilerExtensionVersion "1.4.0"
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}


tasks.withType(Test) {
    dependencies {

        // Activity
        def activity_version = "1.7.1"
        implementation "androidx.activity:activity-ktx:$activity_version"
        implementation "androidx.activity:activity-compose:$activity_version"

        // Compose
        def compose_version = '1.4.3'
        implementation "androidx.compose.ui:ui:$compose_version"
        implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
        implementation "androidx.compose.compiler:compiler:1.4.7"
        implementation "androidx.compose.material:material:$compose_version"
        implementation "androidx.compose.runtime:runtime:$compose_version"
        implementation "androidx.compose.runtime:runtime-livedata:$compose_version"

        // AlphaTab
        implementation 'net.alphatab:alphaTab-android:1.3.0-SNAPSHOT'

        // Coil (Used for profile pictures)
        implementation("io.coil-kt:coil-compose:2.3.0")

        // Lifecycle
        def lifecycle_version = '2.6.1'
        implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
        implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
        implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

        // Navigation fragment
        def nav_version = "2.5.3"
        implementation("androidx.navigation:navigation-compose:$nav_version")
        implementation("androidx.navigation:navigation-fragment-ktx:$nav_version")
        implementation("androidx.navigation:navigation-ui-ktx:$nav_version")

        // Fragment
        def fragment_version = '1.5.7'
        implementation("androidx.fragment:fragment-ktx:$fragment_version")
        debugImplementation("androidx.fragment:fragment-testing:$fragment_version")

        implementation 'androidx.core:core-ktx:1.10.1'
        implementation 'androidx.appcompat:appcompat:1.6.1'
        implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

        // Firebase
        implementation platform('com.google.firebase:firebase-bom:31.2.2')
        // Declare the dependency for the Cloud Firestore library
        implementation 'com.google.firebase:firebase-firestore-ktx'
        implementation 'com.google.firebase:firebase-analytics-ktx'
        // Firebase authentication import
        implementation 'com.firebaseui:firebase-ui-auth:7.2.0'
        implementation 'com.google.firebase:firebase-auth-ktx'


        // TESTING
        androidTestUtil 'androidx.test:orchestrator:1.4.2'
        implementation 'androidx.test:core-ktx:1.5.0'
        implementation "org.jetbrains.kotlin:kotlin-test:1.8.10"

        // Fragment
        debugImplementation "androidx.fragment:fragment-testing:$fragment_version"
        // JUnit Ext
        def junit_ext_version = '1.1.5'
        androidTestImplementation("androidx.test.ext:junit-ktx:$junit_ext_version")
        // Test Runner
        def test_runner_version = '1.5.2'
        androidTestImplementation "androidx.test:runner:$test_runner_version"
        // Test Rules
        def test_rules_version = '1.5.0'
        androidTestImplementation "androidx.test:rules:$test_rules_version"
        implementation 'androidx.test.uiautomator:uiautomator:2.2.0'

        def kotlin_version = "1.8.0"
        testImplementation 'junit:junit:4.13.2'
        testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

        def espresso_version = "3.5.1"
        androidTestImplementation ("androidx.test.espresso:espresso-core:$espresso_version")
        androidTestImplementation ("androidx.test.espresso:espresso-intents:$espresso_version")
        testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.1'

        // Compose
        debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
        // Test rules and transitive dependencies:
        androidTestImplementation("androidx.compose.ui:ui-test-junit4:$compose_version")
        // Needed for createAndroidComposeRule, but not createComposeRule:
        debugImplementation("androidx.compose.ui:ui-test-manifest:$compose_version")
    }

    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
    testLogging {
        showStandardStreams = true
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
    ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/*/coverage.ec'
    ]))
}

connectedCheck {
    finalizedBy jacocoTestReport
}